/// Owner
///
/// 깃허브 상에서 `Owner`는 반드시 유저 마다 1개씩 존재하는 것이긴 하지만,
/// 반드시 그것이 유저를 대상으로 한다고 말할 수는 없는 것이다.
/// 때로는 유저가 아니라 Organization이 소유자일 수도 있다.
/// 
/// @namespace Repository
model Owner {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Type of Owner
  ///
  /// Owner의 타입을 의미한다.
  /// 코드 저장소에서 Owner는 반드시 개인이 아니라 Organization일 수도 있기 때문이다.
  /// 유저 아이디가 null인지 아닌지로 알 수 있는 내용이긴 하지만, 별도의 타입을 두어 구분한다.
  type String

  /// ID of User
  ///
  /// 만약 Repository의 소유자가 개인일 경우 user_id가 존재한다.
  user_id String? @db.Uuid

  /// ID of Organization
  ///
  /// 만약 Repository의 소유자가 집단일 경우 user_id가 존재한다.
  organization_id String? @db.Uuid

  /// Application
  ///
  /// 유저가 어떤 서비스에 가입했는지를 의미한다.
  /// 여기서는 github, gitlab, gitbucket이 존재하며, 추후에 확장될 여지가 있다.
  application String

  //---- RELATIONS ----

  /// 유저가 소유한 Repository
  /// 
  Repository   Repository[]
  User         User?         @relation("User", fields: [user_id], references: [id])
  Organization Organization? @relation("Organization", fields: [organization_id], references: [id])

  @@unique([user_id])
  @@unique([organization_id])
}

/// Organization
///
/// @namespace Organization
/// @erd Repository
model Organization {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Creator ID
  ///
  /// 최초로 이 Organization을 만든 사람의 아이디를 의미한다.
  /// 이 아이디가 있다고 해서, 이 사람만이 조직을 운영할 수 있는 것은 아니다.
  creator_id String @db.Uuid

  /// name
  ///
  /// 서비스에서의 조직 이름
  name  String @unique
  Owner Owner? @relation("Organization")

  Creator User      @relation(fields: [creator_id], references: [id])
  Manager Manager[]
}

/// 조직을 관리할 수 있는 매니저
///
/// Github에서는 하나의 조직을, 생성한 Owner 외에도 관리할 수 있을 뿐더러, Owner 를 다수로 지정할 수도 있다.
/// 다수의 관리자들을 두는 경우, 여기서 Organization의 아이디와 User의 ID를 매핑하면 된다.
///
/// @namespace Organization
model Manager {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// User ID
  ///
  /// 매니저로 지정될 유저의 아이디
  user_id String @db.Uuid

  /// Organization ID 
  ///
  /// 매니저가 지정될 조직의 아이디
  organization_id String @db.Uuid

  /// Organization ID 
  ///
  /// 매니저가 지정될 조직의 아이디
  repository_id String @db.Uuid

  /// 매니저의 권한
  ///
  /// 매니저의 경우, Owner, Admin, Write, Read가 존재한다.
  /// - Owner: 리포지토리의 모든 설정을 관리할 수 있는 권한으로 삭제 및 이동, 타 멤버의 권한을 조정하는 행위가 가능
  /// - Admin: 레포지토리 설정을 관리할 수 있음
  /// - Write: 레포지토리에 `Push`가 가능하다.
  /// - Read: 코드를 읽을 수 있을 뿐, 코드 작성 뿐만 아니라 이슈나 PR 등의 생성 역시 불가능하다.
  ///
  /// 단, Repository에 대해서는 소유자 외 다른 사람을 `Owner` 권한으로 할당할 수 없다.
  type String

  //---- RELATIONS ----
  ///
  ///
  ///
  User         User         @relation(fields: [user_id], references: [id])
  Organization Organization @relation(fields: [organization_id], references: [id])

  @@unique([user_id, organization_id])
}

/// User
///
/// Github에서의 유저를 의미한다.
///
/// @namespace Repository
/// @erd Organization
model User {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Username
  ///
  /// 서비스에서의 사용자 이름
  username String @unique

  /// Email
  ///
  /// 사용자의 이메일 주소
  email String

  /// Password
  ///
  /// Hash 알고리즘이 적용된 문자열을 의미한다.
  /// 절대 평문으로 저장하지 않는다.
  password String

  //---- RELATIONS ----

  /// 사용자가 포크한 레포지토리
  Interaction Interaction[]
  Comment     Comment[]
  Task        Task[]
  Commit      Commit[]

  ///
  ///
  /// 논리적으로는 반드시 존재해야 한다.
  Owner        Owner?         @relation("User")
  Organization Organization[]
  Manager      Manager[]
  Reviewers    Reviewer[]
  Assignees    Assignee[]
  Issue        Issue[]
  PullRequest  PullRequest[]
}

/// Repository
///
/// 깃허브의 레포지토리를 의미한다.
/// @namespace Repository
model Repository {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Owner ID
  ///
  /// Repository를 소유한 Owner의 ID
  owner_id String @db.Uuid

  /// Owner Relation
  ///
  /// Repository와 연관된 Owner를 나타냄
  owner Owner @relation(fields: [owner_id], references: [id])

  /// Name of the Repository
  ///
  /// 레포지토리의 이름
  name String

  /// Description
  ///
  /// 레포지토리 설명
  description String?

  /// Visibility of Repository
  ///
  /// 레포지토리의 공개 여부
  is_private Boolean

  /// Primary Programming Language
  ///
  /// 주요 언어
  language String?

  /// Created At
  ///
  /// 레포지토리 생성 시간
  created_at DateTime @db.Timestamptz()

  /// Last Updated At
  ///
  /// Repository가 마지막으로 업데이트된 시간
  updated_at DateTime @updatedAt @db.Timestamptz()

  //---- RELATIONS ----

  /// 이 레포지토리를 포크한 내역
  Interaction Interaction[]
  Branch      Branch[]
  Commit      Commit[]
}

/// Branch
///
/// 브랜치는 커밋에 사람이 인식할 수 있는 자연어 이름을 지정한 것을 의미한다.
/// 따라서 브랜치는 어떠한 커밋에 이름을 붙였는지를 알기 위해 commit_id를 지닌다.
/// 동일한 커밋 값에 여러 개의 브랜치를 생성하는 것 역시 가능하다.
///
/// @namespace Repository
/// @erd Task
model Branch {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  ///
  ///
  ///
  commit_id String @db.Uuid

  /// Branch의 이름을 의미한다.
  ///
  ///
  name String

  /// 마스터, 즉 메인 브랜치를 의미한다.
  ///
  /// 이 칼럼이 True인 경우 Main 브랜치
  is_master Boolean

  repository_id String @db.Uuid

  ///
  ///
  /// 데이터가 생성된 시간
  created_at DateTime @db.Timestamptz()

  Repository Repository @relation(fields: [repository_id], references: [id])
  Commit     Commit     @relation(fields: [commit_id], references: [id])

  CacheFiles BranchFileSnapshot[]

  sourcePullRequests PullRequest[] @relation("SourceBranch")

  targetPullRequests PullRequest[] @relation("TargetBranch")
}

/// Branch가 캐시한 파일 목록
///
/// 각 커밋은 커밋으로 인해 변경된 파일만을 지닌다.
/// 따라서 특정 시점에서의 전체 파일 목록을 조회하고자 하면 그 전까지의 커밋들을 순회하는 수 밖에 없다.
/// 실제 Git의 구현은 위와 같지만, 이를 보다 성능 상 유리하게 만들기 위해 브랜치에 한정하여 캐시를 하도록 한다.
/// 브랜치는 해당 브랜치 이전에 만들어진 가장 최근 브랜치를 기준으로 삼아, 해당 브랜치로부터 나머지 커밋들을 순회하여 현 상태를 저장하게끔 한다.
/// 이 캐시는 브랜치의 생성 시점을 기준으로 하며, 브랜치로부터 커밋이 추가로 생긴다면 다시금 순회를 시작해야 한다.
/// 
/// 또한, 순회를 이용하든 일정 지점까지는 캐시를 이용하고 나머지만 순회하든, 결국 동일한 파일 목록이 나온다고 보장되어야 한다.
///
/// @namespace Repository
model BranchFileSnapshot {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// 캐시한 브랜치의 아이디
  ///
  ///
  branch_id String @db.Uuid

  /// 캐시할 파일의 아이디를 의미한다.
  ///
  ///
  file_id String @db.Uuid

  Branch Branch @relation(fields: [branch_id], references: [id])
  File   File   @relation(fields: [file_id], references: [id])
}

/// 레포지토리 상에서의 변경 내역을 의미한다.
///
/// 변경 내역은 `Commit` 이라고 하며 변경된 파일의 목록을 지닌다.
/// 이 때, 변경 내역이 없을 수도 있는데, 이는 `Empty Commit` 이라고 하여 명시적으로 커밋한 경우이다.
/// 이 경우를 제외하고는 `Files`는 반드시 1개 이상 존재해야 한다.
///
/// @namespace Repository
model Commit {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  ///
  ///
  ///
  repository_id String @db.Uuid

  /// 커밋 자성자의 아이디
  ///
  ///
  commiter_id String @db.Uuid

  /// 부모 커밋의 아이디
  ///
  /// 커밋은 기본적으로 링크드리스트이며, 최초의 커밋 외에는 무조건 부모의 아이디를 가진다.
  parent_id String? @db.Uuid

  /// 커밋을 가리킬 수 있는 Hash 값
  ///
  ///
  hash String

  /// 커밋 메시지
  ///
  ///
  message String

  ///
  ///
  /// 데이터가 생성된 시간
  created_at DateTime @db.Timestamptz()

  Repository Repository @relation(fields: [repository_id], references: [id])
  User       User       @relation(fields: [commiter_id], references: [id])
  Files      File[]
  Branch     Branch[]
  Children   Commit[]   @relation("parent-children")
  Parent     Commit?    @relation("parent-children", fields: [parent_id], references: [id])
}

/// 커밋이 변경한 파일
/// 
/// 커밋이 변경한 파일은 body에 전체 파일 내용을 가지고 있어야 한다.
/// Github에서 `diff`를 보여주는 방식은 DB에 저장되는 것이 아니다.
/// 파일의 변경 내역을 비교할 두 커밋은 무수한 조합이 가능하기 때문에 미리 DB에 저장하는 것이 불가능하다.
/// 
/// 두 커밋을 가지고 `diff`를 구하고자 할 때, 이전 커밋이 LEFT로, 나중 커밋은 RIGHT로 지정되며 diff 알고리즘에 따른다.
///
/// @namespace Repository
model File {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  ///
  ///
  ///
  commit_id String? @db.Uuid

  /// 파일의 이름
  ///
  /// 파일의 이름에는 path를 포함하고 있다.
  name String

  /// 파일의 확장자
  ///
  /// 파일의 확장자는 파일의 이름으로부터 추출하되, 알 수 없는 경우가 있을 수도 있다.
  /// 일반 텍스트 파일의 경우 `txt` 확장자이지만 그마저도 명시가 안된 경우가 있을 수 있어 null을 허용한다.
  extension String?

  /// 파일의 내용물
  ///
  ///
  body String?

  Commit             Commit?              @relation(fields: [commit_id], references: [id])
  BranchFileSnapshot BranchFileSnapshot[]
}

/// Star
///
/// 사용자가 레포지토리에 별점을 준 기록
/// @namespace Interaction
model Star {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  Base Interaction @relation(fields: [id], references: [id])
}

/// 상호작용을 의미한다.
///
/// 여기서의 상호작용은 코드 저장소인 Repository와 유저 사이의 상호작용이다.
/// 스타를 누르거나 포크를 하는 등의 모든 상호작용을 Interaction이라고 하는데,
/// 굳이 이를 Base Entity로 뺀 이유는 추후 어떠한 확장 요소가 생길지 모르기 때문이다.
/// 이러한 확장성을 제외하고 생각한다면 Interaction에 type 칼럼을 두고 'star', 'fork'로 구분하는 것도 나쁘지 않다.
///
/// 추후 사라질 수 있는 테이블이며, 이 경우 'fork'가 다른 방식으로 구현될 여지가 있기 때문이다.
///
/// @namespace Interaction
model Interaction {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Repository ID
  ///
  /// 레포지토리의 ID
  repository_id String @db.Uuid

  /// User ID
  ///
  /// 사용자의 ID
  user_id String @db.Uuid

  ///
  ///
  /// 데이터가 생성된 시간
  created_at DateTime @db.Timestamptz()

  /// Repository Relation
  repository Repository @relation(fields: [repository_id], references: [id])

  /// User Relation
  user User   @relation(fields: [user_id], references: [id])
  Fork Fork[]
  Star Star[]

  @@map("Base")
}

/// Fork
///
/// 사용자가 레포지토리를 포크한 기록
/// @namespace Interaction
model Fork {
  /// ID
  ///
  /// @format uuid
  id String @id @db.Uuid

  Base Interaction @relation(fields: [id], references: [id])
}
